<?php

declare(strict_types=1);

use CameraAPI\CameraHandler;
use muqsit\invmenu\InvMenuHandler;
use pocketmine\player\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use ref\libNpcDialogue\libNpcDialogue;
use UtilityPlugin\comandos\help_cmd;
use UtilityPlugin\UtilityListener;

class UtilityLoader extends PluginBase{
    private static UtilityLoader $instance;

    /**
     * @throws Exception
     */
    protected function onEnable(): void
    {
        if(!libNpcDialogue::isRegistered()) libNpcDialogue::register($this);
        if(!InvMenuHandler::isRegistered()) InvMenuHandler::register($this);
        if(!CameraHandler::isRegistered()) CameraHandler::register($this);
        self::$instance = $this;
        $this->unreg();
        $this->getServer()->getPluginManager()->registerEvents(new UtilityListener(), $this);

        $this->getServer()->getCommandMap()->register('', new help_cmd());
    }

    public function unregisterCommand(string $name) : void{
        $commandMap = $this->getServer()->getCommandMap();
        $command = $commandMap->getCommand($name);
        if($command !== null){
            $command->setLabel($command->getLabel() . "__disabled");
            $commandMap->unregister($command);
        }
    }

    public function unreg() : void{
        $config = $this->getConfig();
        $get = $config->get("ban-default-cmds");
        $cmds = $get['cmds'] ?? [];
        $banir = $get['banir'] ?? false;

        if($banir) foreach ($cmds as $cmd) {
            self::unregisterCommand((string)$cmd);
        }
    }

    function getPlayerByPrefix(string $playername): ?Player
    {
        $players = $this->getServer()->getOnlinePlayers();
        $found = null;
        if($pl = $this->getServer()->getPlayerExact($playername)) return $pl;
        foreach($players as $player)
        {
            if(str_starts_with(strtolower($player->getName()), strtolower($playername)))
            {
                $found = $player;
                break;
            }
        }
        return $found;
    }

    public function getConfig(): Config
    {
        $this->saveResource('config.yml');
        return parent::getConfig(); // TODO: Change the autogenerated stub
    }

    /**
     * @return UtilityLoader
     */
    public static function getInstance(): UtilityLoader
    {
        return self::$instance;
    }
}